name: Build, Sign, and Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags (v1.0.0, v2.1.3, etc)
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (without v prefix)'
        required: true
        default: '1.0.0'

jobs:
  build-and-release-macos:
    permissions:
      contents: write  # Required for creating releases
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for tags
          submodules: recursive  # Get all submodules if your project uses them

      - name: Get version
        id: get_version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            # From tag
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else
            # From manual input
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies
        run: |
          brew update
          brew install cmake
          # Add any other dependencies your project needs

      - name: Setup Apple certificate
        env:
          CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ github.run_id }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/developer_id.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Import certificate from secrets
          echo -n "$CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Allow codesign to access the keys
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      - name: Build project
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release -j 8

      - name: Sign the plugins
        run: |
          # Define paths for all the plugin formats (Instrument and Effect)
          # Instrument plugins
          INSTRUMENT_VST3_PATH="build/Resonarium_Instrument_artefacts/Release/VST3/Resonarium.vst3"
          INSTRUMENT_AU_PATH="build/Resonarium_Instrument_artefacts/Release/AU/Resonarium.component"
          INSTRUMENT_STANDALONE_PATH="build/Resonarium_Instrument_artefacts/Release/Standalone/Resonarium.app"
          
          # Effect plugins
          EFFECT_VST3_PATH="build/Resonarium_Effect_artefacts/Release/VST3/Resonarium Effect.vst3"
          EFFECT_AU_PATH="build/Resonarium_Effect_artefacts/Release/AU/Resonarium Effect.component"
          EFFECT_STANDALONE_PATH="build/Resonarium_Effect_artefacts/Release/Standalone/Resonarium Effect.app"
          
          # Sign all formats with the same options
          echo "Signing Instrument VST3..."
          codesign --force -s "Developer ID Application: Gabriel Soule (K2AXHVS6MZ)" -v "$INSTRUMENT_VST3_PATH" --deep --strict --options=runtime --timestamp
          
          echo "Signing Instrument AU..."
          codesign --force -s "Developer ID Application: Gabriel Soule (K2AXHVS6MZ)" -v "$INSTRUMENT_AU_PATH" --deep --strict --options=runtime --timestamp
          
          echo "Signing Instrument Standalone..."
          codesign --force -s "Developer ID Application: Gabriel Soule (K2AXHVS6MZ)" -v "$INSTRUMENT_STANDALONE_PATH" --deep --strict --options=runtime --timestamp
          
          echo "Signing Effect VST3..."
          codesign --force -s "Developer ID Application: Gabriel Soule (K2AXHVS6MZ)" -v "$EFFECT_VST3_PATH" --deep --strict --options=runtime --timestamp
          
          echo "Signing Effect AU..."
          codesign --force -s "Developer ID Application: Gabriel Soule (K2AXHVS6MZ)" -v "$EFFECT_AU_PATH" --deep --strict --options=runtime --timestamp
          
          echo "Signing Effect Standalone..."
          codesign --force -s "Developer ID Application: Gabriel Soule (K2AXHVS6MZ)" -v "$EFFECT_STANDALONE_PATH" --deep --strict --options=runtime --timestamp
          
          # Verify signing for all formats
          echo "Verifying Instrument VST3..."
          codesign --verify --verbose "$INSTRUMENT_VST3_PATH"
          
          echo "Verifying Instrument AU..."
          codesign --verify --verbose "$INSTRUMENT_AU_PATH"
          
          echo "Verifying Instrument Standalone..."
          codesign --verify --verbose "$INSTRUMENT_STANDALONE_PATH"
          
          echo "Verifying Effect VST3..."
          codesign --verify --verbose "$EFFECT_VST3_PATH"
          
          echo "Verifying Effect AU..."
          codesign --verify --verbose "$EFFECT_AU_PATH"
          
          echo "Verifying Effect Standalone..."
          codesign --verify --verbose "$EFFECT_STANDALONE_PATH"

      - name: Create ZIP archives
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          
          # Create separate ZIP archives for Instrument and Effect
          INSTRUMENT_ZIP_NAME="Resonarium-Instrument-$VERSION-macOS.zip"
          EFFECT_ZIP_NAME="Resonarium-Effect-$VERSION-macOS.zip"
          
          # Create directories for the plugins
          mkdir -p instrument_package/VST3
          mkdir -p instrument_package/Components
          mkdir -p instrument_package/Standalone
          
          mkdir -p effect_package/VST3
          mkdir -p effect_package/Components
          mkdir -p effect_package/Standalone
          
          # Copy the plugins to their respective directories
          cp -R "build/Resonarium_Instrument_artefacts/Release/VST3/Resonarium.vst3" instrument_package/VST3/
          cp -R "build/Resonarium_Instrument_artefacts/Release/AU/Resonarium.component" instrument_package/Components/
          cp -R "build/Resonarium_Instrument_artefacts/Release/Standalone/Resonarium.app" instrument_package/Standalone/
          
          cp -R "build/Resonarium_Effect_artefacts/Release/VST3/Resonarium Effect.vst3" effect_package/VST3/
          cp -R "build/Resonarium_Effect_artefacts/Release/AU/Resonarium Effect.component" effect_package/Components/
          cp -R "build/Resonarium_Effect_artefacts/Release/Standalone/Resonarium Effect.app" effect_package/Standalone/
          
          # Create ZIP archives
          cd instrument_package
          zip -r "../$INSTRUMENT_ZIP_NAME" .
          cd ..
          
          cd effect_package
          zip -r "../$EFFECT_ZIP_NAME" .
          cd ..

      - name: Notarize the packages
        env:
          APPLE_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
          TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          INSTRUMENT_ZIP_NAME="Resonarium-Instrument-$VERSION-macOS.zip"
          EFFECT_ZIP_NAME="Resonarium-Effect-$VERSION-macOS.zip"
          
          # Notarize Instrument package
          echo "Notarizing Instrument package..."
          xcrun notarytool submit "$INSTRUMENT_ZIP_NAME" --apple-id "$APPLE_ID" --password "$APPLE_PASSWORD" --team-id "$TEAM_ID" --wait
          
          # Notarize Effect package
          echo "Notarizing Effect package..."
          xcrun notarytool submit "$EFFECT_ZIP_NAME" --apple-id "$APPLE_ID" --password "$APPLE_PASSWORD" --team-id "$TEAM_ID" --wait
          
          # Check notarization history to make sure it succeeded
          xcrun notarytool history --apple-id "$APPLE_ID" --password "$APPLE_PASSWORD" --team-id "$TEAM_ID"
          
          # Unzip to staple tickets
          mkdir -p notarized_instrument
          mkdir -p notarized_effect
          
          unzip "$INSTRUMENT_ZIP_NAME" -d notarized_instrument
          unzip "$EFFECT_ZIP_NAME" -d notarized_effect
          
          # Staple the notarization tickets to each plugin
          echo "Stapling tickets to Instrument plugins..."
          xcrun stapler staple "notarized_instrument/VST3/Resonarium.vst3"
          xcrun stapler staple "notarized_instrument/Components/Resonarium.component"
          xcrun stapler staple "notarized_instrument/Standalone/Resonarium.app"
          
          echo "Stapling tickets to Effect plugins..."
          xcrun stapler staple "notarized_effect/VST3/Resonarium Effect.vst3"
          xcrun stapler staple "notarized_effect/Components/Resonarium Effect.component"
          xcrun stapler staple "notarized_effect/Standalone/Resonarium Effect.app"
          
          # Create final notarized zips
          cd notarized_instrument
          zip -r "../Resonarium-Instrument-$VERSION-macOS-notarized.zip" .
          cd ..
          
          cd notarized_effect
          zip -r "../Resonarium-Effect-$VERSION-macOS-notarized.zip" .
          cd ..

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-packages
          path: |
            Resonarium-Instrument-${{ steps.get_version.outputs.VERSION }}-macOS-notarized.zip
            Resonarium-Effect-${{ steps.get_version.outputs.VERSION }}-macOS-notarized.zip

  build-and-release-windows:
    permissions:
      contents: write
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Get version
        id: get_version
        shell: bash
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            # From tag
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else
            # From manual input
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies
        shell: powershell
        run: |
          choco install cmake ninja
          # Visual Studio is already installed on Windows runners

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.3

      - name: Setup Visual Studio
        uses: ilammy/msvc-dev-cmd@v1

      - name: Build project
        shell: powershell
        run: |
          mkdir -p build
          cd build
          # Use Visual Studio generator instead of Ninja, and explicitly specify MSVC compiler
          cmake .. -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release --parallel 8

      - name: Create ZIP archives
        shell: powershell
        run: |
          $VERSION = "${{ steps.get_version.outputs.VERSION }}"
          
          # Create separate ZIP archives for Instrument and Effect
          $INSTRUMENT_ZIP_NAME = "Resonarium-Instrument-$VERSION-Windows.zip"
          $EFFECT_ZIP_NAME = "Resonarium-Effect-$VERSION-Windows.zip"
          
          # Create directories for the plugins
          mkdir -Force instrument_package/VST3
          mkdir -Force instrument_package/Standalone
          
          mkdir -Force effect_package/VST3
          mkdir -Force effect_package/Standalone
          
          # Copy the plugins to their respective directories
          # Visual Studio uses a different output structure compared to Ninja
          # The paths below are adjusted for Visual Studio's output structure
          Copy-Item -Path "build/Resonarium_Instrument_artefacts/Release/VST3/Resonarium.vst3" -Destination "instrument_package/VST3/" -Recurse
          Copy-Item -Path "build/Resonarium_Instrument_artefacts/Release/Standalone/Resonarium.exe" -Destination "instrument_package/Standalone/" -Recurse
          
          Copy-Item -Path "build/Resonarium_Effect_artefacts/Release/VST3/Resonarium Effect.vst3" -Destination "effect_package/VST3/" -Recurse
          Copy-Item -Path "build/Resonarium_Effect_artefacts/Release/Standalone/Resonarium Effect.exe" -Destination "effect_package/Standalone/" -Recurse
          
          # Create ZIP archives
          Compress-Archive -Path "instrument_package/*" -DestinationPath $INSTRUMENT_ZIP_NAME -Force
          Compress-Archive -Path "effect_package/*" -DestinationPath $EFFECT_ZIP_NAME -Force

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-packages
          path: |
            Resonarium-Instrument-${{ steps.get_version.outputs.VERSION }}-Windows.zip
            Resonarium-Effect-${{ steps.get_version.outputs.VERSION }}-Windows.zip

  create-release:
    needs: [build-and-release-macos, build-and-release-windows]
    permissions:
      contents: write
    runs-on: ubuntu-latest

    steps:
      - name: Get version
        id: get_version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            # From tag
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else
            # From manual input
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*'
          merge-multiple: false

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          name: Resonarium ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          files: |
            macos-packages/Resonarium-Instrument-${{ steps.get_version.outputs.VERSION }}-macOS-notarized.zip
            macos-packages/Resonarium-Effect-${{ steps.get_version.outputs.VERSION }}-macOS-notarized.zip
            windows-packages/Resonarium-Instrument-${{ steps.get_version.outputs.VERSION }}-Windows.zip
            windows-packages/Resonarium-Effect-${{ steps.get_version.outputs.VERSION }}-Windows.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}